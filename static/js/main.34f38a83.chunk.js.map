{"version":3,"sources":["components/SearchProfile.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["SearchProfile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onHandleSubmit","bind","assertThisInitialized","event","preventDefault","username","refs","value","profile","react_default","a","createElement","className","onSubmit","type","ref","placeholder","Component","Profile","user","notFound","href","avatar_url","target","rel","src","avatar","alt","homeUrl","name","location","followers_url","followers","repos_url","repos","following_url","following","App","state","_this2","fetch","concat","then","response","json","setState","login","public_repos","html_url","message","catch","console","log","src_components_SearchProfile","src_components_Profile","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34f38a83.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './SearchProfile.css';\r\n\r\nclass SearchProfile extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.onHandleSubmit = this.onHandleSubmit.bind(this);\r\n    }\r\n\r\n    onHandleSubmit(event) {\r\n        event.preventDefault();\r\n        let username = this.refs.username.value\r\n        this.props.profile(username)       \r\n    }\r\n\r\n    render() {  \r\n        return (\r\n            <div className=\"root\">\r\n                <form onSubmit={this.onHandleSubmit}>\r\n                <label>\r\n                <input \r\n                    type=\"text\" \r\n                    ref=\"username\"\r\n                    placeholder=\"Type your username\"\r\n                />\r\n                </label>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchProfile;","import React, { Component } from 'react';\r\nimport './SearchProfile.css';\r\nimport './Profile.css';\r\n\r\nclass Profile extends Component {\r\n    render() {\r\n            //Checking if user exist or not through props\r\n                if(this.props.user.notFound === \"Not Found\")\r\n                    return (\r\n                        <div className=\"root\">\r\n                        <div className=\"info\">\r\n                        <div className=\"notFound\">\r\n                            <h2>Sorry!</h2>\r\n                            <p>We can't find this user!!</p>\r\n                        </div>\r\n                        </div>\r\n                        </div>\r\n                    )\r\n                else{   \r\n                    return(\r\n                        <div className=\"root\">\r\n                         <div className=\"info\">\r\n                            <a href={this.props.user.avatar_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <img\r\n                                    src={this.props.user.avatar} \r\n                                    alt=\"Profile\"\r\n                                />\r\n                            </a>    \r\n                            <h2>\r\n                                <a href={this.props.user.homeUrl} target=\"_blank\" rel=\"noopener noreferrer\">{this.props.user.name}</a>\r\n                            </h2>\r\n                            <h3>{this.props.user.location}</h3>\r\n                        </div>\r\n\r\n                        <div className=\"state\">\r\n                            <ul>\r\n                            <li>\r\n                                <a href={this.props.user.followers_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <i>{this.props.user.followers}</i>\r\n                                <span>Followers</span>\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a href={this.props.user.repos_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <i>{this.props.user.repos}</i>\r\n                                <span>Repositories</span>\r\n                                </a>\r\n                            </li>\r\n                            <li>\r\n                                <a href={this.props.user.following_url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <i>{this.props.user.following}</i>\r\n                                <span>Following</span>\r\n                                </a>\r\n                            </li>\r\n                            </ul>\r\n                        </div>\r\n                        </div>\r\n                    )\r\n                }\r\n    }\r\n}\r\n\r\nexport default Profile;","import React, { Component } from 'react';\nimport SearchProfile from './components/SearchProfile';\nimport Profile from './components/Profile';\nimport './App.css';\n\nconst URL = 'https://api.github.com/users';\n\nclass App extends Component {\n  constructor(){\n    super()\n    //Default state for the state\n    this.state = {\n      username: 'nikZayn',\n      name: '',\n      avatar: '',\n      location: '',\n      repos: '',\n      followers: '',\n      following: '',\n      homeUrl: '',\n      notFound: ''\n    }\n    this.profile = this.profile.bind(this);\n  }\n\n  //Profile function for fetching the data from the github api\n  profile(username) {\n    fetch(`${URL}/${username}`)\n        .then(response => {\n          return response.json()\n        })\n        .then(user => {\n          this.setState({\n            username: user.login,\n            name: user.name,\n            avatar: user.avatar_url,\n            location: user.location,\n            repos: user.public_repos,\n            followers: user.followers,\n            following: user.following,\n            homeUrl: user.html_url,\n            notFound: user.message\n          })\n        })\n        .catch(user => console.log(`Sorry github account couldn't find it up!`))\n}\n\ncomponentWillMount() {\n    //By default my github bio\n    this.profile(this.state.username);\n}\n  render() {\n    return (\n      <div>\n        <section className=\"card\">\n          <SearchProfile profile = {this.profile}/>\n          <Profile user={this.state}/>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}